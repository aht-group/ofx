<?xml version="1.0" encoding="UTF-8"?>
<!--
*******************************************************************************
  | openFuXML open source                                                       |
*******************************************************************************
  | Copyright (c) 2002-2006 openFuXML open source, University of Hagen          |
  |                                                                             |
  | This program is free software; you can redistribute it and/or               |
  | modify it under the terms of the GNU General Public License                 |
  | as published by the Free Software Foundation; either version 2              |
  | of the License, or (at your option) any later version.                      |
  |                                                                             |
  | This program is distributed in the hope that it will be useful,             |
  | but WITHOUT ANY WARRANTY; without even the implied warranty of              |
  | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               |
  | GNU General Public License for more details.                                |
  |                                                                             |
  | You should have received a copy of the GNU General Public License           |
  | along with this program; if not, write to the Free Software                 |
  | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. |
*******************************************************************************
	-->
<project name="scorm" default="scorm">
	<property name="project" value="${coursename}"/>
	<property name="document" value="${documentdir}${masterfile}"/>
	<property name="src.dir" value="${ilona.contentstore}/${project}"/>
	<property name="format.dir" value="${ilona.home}/applications/fuxml/formats"/>
	<property name="scorm.dir" value="${ilona.output}/${project}/scorm/${documentdir}"/>
	<property name="math.dir" value="${ilona.output}/${project}/scorm/math"/>
	<property name="common.dir" value="${ilona.output}/${project}/common/${documentdir}"/>
	<property name="dtd.dir" value="${src.dir}/dtd"/>
	<property name="xsltemp.dir" value="${ilona.output}/${project}/xsl"/>
	<property name="config.dir" value="${src.dir}/config"/>
	<property name="project.dir" value="${ilona.output}/${project}"/>
	<property name="base.dir" value="${project}/${format}"/>
	<property name="request" value="${scorm.dir}/${document.plain}/request.xml"/>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="initialisation">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<!-- Copy XSL files to temporary directory -->
		<copy todir="${xsltemp.dir}" preservelastmodified="true" overwrite="true">
			<fileset dir="${format.dir}"/>
		</copy>
		<!-- process request options into properties -->
		<exec executable="java" dir="${ilona.output}/sessionpreferences" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<arg line="-o"/>
			<arg value="${ilona.output}/sessionpreferences/${username}-${project}-request.options"/>
			<arg value="${ilona.output}/sessionpreferences/${username}-${project}-request.xml"/>
			<arg value="${xsltemp.dir}/common/processoptions.xsl"/>
		</exec>
		<property file="${ilona.output}/sessionpreferences/${username}-${project}-request.options"/>
		<!-- determine if "clean" option is "true"-->
		<condition property="do_clean">
			<istrue value="${option.clean}"/>
		</condition>
		<echo>Clean output dir: ${do_clean}</echo>
		<antcall target="clean"/>
		<!-- Create directories -->
		<mkdir dir="${scorm.dir}"/>
		<mkdir dir="${scorm.dir}/${document.plain}"/>
		<record name="${scorm.dir}/${document.plain}/${document.plain}.build.log" action="start" append="no"/>
		<tstamp>
			<format property="time" pattern="dd/MM/yyyy hh:mm aa"/>
		</tstamp>
		<echo>Time: ${time}</echo>
		<property environment="env"/>
		<echo message="Ant Version = ${ant.home}"/>
		<echo message="Ant Version = ${ant.version}"/>
		<echo message="Java Version = ${java.version}"/>
		<!--exec executable="java" dir="${html.dir}/${document.plain}" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<arg line="-o"/>
			<arg value="${html.dir}/${document.plain}/${username}-${project}-request.options"/>
			<arg value="${ilona.output}/sessionpreferences/${username}-${project}-request.xml"/>
			<arg value="${xsltemp.dir}/common/processoptions.xsl"/>
		</exec>
		<property file="${html.dir}/${document.plain}/${username}-${project}-request.options"/-->
		<loadfile property="prod_request" srcfile="${ilona.output}/sessionpreferences/${username}-${project}-request.xml"/>
		<echo message="Request: ${prod_request}"/>
		<!-- copy ProductionRequest -->
		<copy file="${ilona.output}/sessionpreferences/${username}-${project}-request.xml" tofile="${scorm.dir}/${document.plain}/request.xml" overwrite="true" failonerror="true"/>
		<!-- copy user settings for project -->
		<copy file="${src.dir}/system/config/config.xml" tofile="${xsltemp.dir}/common/config.xml" failonerror="false" overwrite="true" preservelastmodified="true"/>
		<!-- copy user settings for document -->
		<copy file="${src.dir}/system/config/${document.plain}/config.xml" tofile="${xsltemp.dir}/common/config.xml" failonerror="false" overwrite="true" preservelastmodified="true"/>
		
		<!-- Update html.css
		<echo message="Now copy 'html.css' from tempdir to project output folder, if cvs-version newer"/>
		<copy file="${xsltemp.dir}/html/html.css" tofile="${scorm.dir}/${document.plain}/style/html.css" failonerror="false" overwrite="true" preservelastmodified="true"/>
		<echo message="Done."/> -->
		
		<!-- Copy User XSL -->
		<copy todir="${xsltemp.dir}/scorm" failonerror="false" preservelastmodified="true" overwrite="true">
			<fileset dir="${config.dir}/scorm"/>
		</copy>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="clean"><!-- if="do_clean": always clean due to otherwise stalling of build process -->
		<echo>Deleting old files</echo>
		<delete dir="${scorm.dir}/${document.plain}"/>
		<delete dir="${common.dir}/${document.plain}"/>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="scorm" depends="initialisation">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<!-- if xslt files have changed -> rebuild all -->
		<dependset>
			<srcfileset dir="${xsltemp.dir}/common" includes="*" excludes="build.xml"/>
			<targetfileset dir="${common.dir}/${document.plain}" includes="*"/>
		</dependset>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- +  Run Prestage                                                     + -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<ant antfile="${xsltemp.dir}/common/build.xml" dir="." target="prestage" inheritAll="true"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- +  XSLT: Pass1:  Insertion of directories (Lists, TOC)              + -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Pass1: making NEUE-BILDSCHIRMSEITE work"/>
		<apply executable="java" dest="${scorm.dir}/${document.plain}" parallel="false" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<!--arg value="-ds"/-->
			<!--arg value="-w0"/-->
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/common/demux.xsl"/>
			<!-- Umstellung von Projektnamen auf Dokumentenname ...
			<arg value="documentname=${project}"/>
			-->
			<arg value="projectname=${project}"/>
			<arg value="documentname=${document.plain}"/>
			<arg value="document_url=${common.dir}/${document.plain}/${document.plain}.assembled.lin.cu.num.xml"/>
			<arg value="designpath=${src.dir}/system/design/"/>
			<fileset dir="${common.dir}/${document.plain}" includes="${document.plain}.assembled.lin.cu.num.xml"/>
			<mapper type="glob" from="*.assembled.lin.cu.num.xml" to="*.d-temp.xml"/>
		</apply>
		<echo message="little correction: split assignment-solutions from assignments"/>
		<apply executable="java" dest="${scorm.dir}/${document.plain}" parallel="false" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<!--arg value="-ds"/-->
			<!--arg value="-w0"/-->
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/common/demux2.xsl"/>
			<!-- Umstellung von Projektnamen auf Dokumentenname ...
			<arg value="documentname=${project}"/>
			-->
			<arg value="projectname=${project}"/>
			<arg value="documentname=${document.plain}"/>
			<arg value="document_url=${common.dir}/${document.plain}/${document.plain}.d-temp.xml"/>
			<arg value="designpath=${src.dir}/system/design/"/>
			<fileset dir="${scorm.dir}/${document.plain}" includes="${document.plain}.d-temp.xml"/>
			<mapper type="glob" from="*.d-temp.xml" to="*.demux.xml"/>
		</apply>
		<echo message="... Pass1: ready"/>		
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- + XSLT: Pass2:  linearisation of files                              + -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Pass2: linearisation of files"/>
		<apply executable="java" dest="${scorm.dir}/${document.plain}" parallel="false" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<!--arg value="-ds"/-->
			<!--arg value="-w0"/-->
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/html/demux-html.xsl"/>
			<!-- Umstellung von Projektnamen auf Dokumentenname ...
			<arg value="documentname=${project}"/>
			-->
			<arg value="projectname=${project}"/>
			<arg value="documentname=${document.plain}"/>
			<arg value="document_url=${scorm.dir}/${document.plain}/${document.plain}.tag.xml"/>
			<arg value="designpath=${src.dir}/system/design/"/>
			<fileset dir="${scorm.dir}/${document.plain}" includes="${document.plain}.demux.xml"/>
			<mapper type="glob" from="*.demux.xml" to="*.demux2.xml"/>
		</apply>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- +  XSLT: Pass3:  Character mapping for source document              + -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Pass3: Mapping of Unicode Characters"/>
		<apply executable="java" dest="${scorm.dir}/${document.plain}" parallel="false" failonerror="true">
			<arg value="org.openfuxml.producer.preprocessors.MappingPreprocessor"/>
			<srcfile/>
			<targetfile/>
			<arg value="${xsltemp.dir}/html/conversionlist.xml"/>
			<arg value="${xsltemp.dir}/latexpdf/idtransform.xsl"/>
			<fileset dir="${scorm.dir}/${document.plain}" includes="${document.plain}.demux2.xml"/>
			<mapper type="glob" from="*.demux2.xml" to="*.demux2.cl.xml"/>
		</apply>
		<!-- Character mapping for configuration document -->
		<exec executable="java" dir="${xsltemp.dir}/common" failonerror="true">
			<arg value="org.openfuxml.producer.preprocessors.MappingPreprocessor"/>
			<arg value="${xsltemp.dir}/common/config.xml"/>
			<arg value="${scorm.dir}/${document.plain}/config.html.xml"/>
			<arg value="${xsltemp.dir}/html/conversionlist.xml"/>
			<arg value="${xsltemp.dir}/html/idtransform.xsl"/>
		</exec>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- +  Equation Tagger mit executable-Aufruf                            + -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<exec executable="java" failonerror="true">
			<arg value="org.openfuxml.producer.preprocessors.EquationTagger"/>
			<arg value="${scorm.dir}/${document.plain}/${document.plain}.demux2.cl.xml"/>
			<arg value="${scorm.dir}/${document.plain}/${document.plain}.demux2.cl.tag.xml"/>
		</exec>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- +  XSLT: Pass4: XML to SCORM                                        + -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Pass4: XML to SCORM"/>
		<apply executable="java" dest="${scorm.dir}/${document.plain}" parallel="false" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<!--arg value="-ds"/-->
			<!--arg value="-w0"/-->
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/scorm/scorm.xsl"/>
			<arg value="medienpfad=../"/>
			<arg value="Quellpfad=${src.dir}/"/>
			<arg value="logfile=${document.plain}.build.log"/>
			<arg value="document=${document.plain}"/>
			<!-- Umstellung von Projektnamen auf Dokumentenname ...
			<arg value="documentname=${project}"/>
			-->
			<arg value="projectname=${project}"/>
			<arg value="documentname=${document.plain}"/>
			<arg value="designpath=${src.dir}/system/design/"/>
			<arg value="configpath=${scorm.dir}/${document.plain}/config.html.xml"/>
			<fileset dir="${scorm.dir}/${document.plain}" includes="${document.plain}.demux2.cl.tag.xml"/>
			<mapper type="glob" from="*.demux2.cl.tag.xml" to="*.xml"/>
		</apply>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- +                                    XSLT: Pass5: Making of Linkwatch-file                                           + -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Pass5: Making of Linkwatch-file"/>
		<apply executable="java" dest="${scorm.dir}/${document.plain}" parallel="false" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<!--arg value="-ds"/-->
			<!--arg value="-w0"/-->
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/html/linkwatch.xsl"/>
			<fileset dir="${scorm.dir}/${document.plain}" includes="${document.plain}.demux2.xml"/>
			<mapper type="glob" from="*.demux2.xml" to="*.linkwatch.xml"/>
		</apply>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- +                                  Create Math Images                                                                    + -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- determine if "clean math" option is "true"-->
		<condition property="do_cleanmath">
			<istrue value="${option.cleanmath}"/>
		</condition>
		<echo>Delete math images: ${do_cleanmath}</echo>
		<antcall target="cleanmath"/>
		<!-- determine if "mathimages" option is "false"-->
		<condition property="do_mathimages">
			<isfalse value="${option.mathimages}"/>
		</condition>
		<echo>Produce Mathimages: ${do_mathimages}</echo>
		<ant antfile="${xsltemp.dir}/math/build.xml" dir="." target="math" inheritAll="true"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- +                                    Copy media files                                                                        + -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Copy designfolder from ${src.dir}/system/design to ${scorm.dir}${document.plain}"/>
		<copy includeEmptyDirs="false" flatten="false" todir="${scorm.dir}/${document.plain}" failonerror="false" verbose="true">
			<fileset dir="${src.dir}/system/design">
				<include name="style/**"/>
				<include name="images/**"/>
				<exclude name="**/source/*"/>
			</fileset>
		</copy>
		<echo message="Copy HTML files"/>
		<copy todir="${scorm.dir}/${document.plain}">
			<fileset dir="${src.dir}/system/design">
				<include name="*.html"/>
				<include name="*.htm"/>
			</fileset>
		</copy>
		<echo message="Copy media files"/>
		<!-- Create build file -->
		<apply executable="java" dest="${scorm.dir}/${document.plain}" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/html/copymedia.xsl"/>
			<arg value="srcdir=${src.dir}"/>
			<arg value="workdir=${scorm.dir}/${document.plain}"/>
			<arg value="mathdir=${math.dir}"/>
			<fileset dir="${scorm.dir}/${document.plain}/" includes="${document.plain}.demux2.cl.tag.xml"/>
			<mapper type="merge" to="copymedia.build"/>
		</apply>
		<!-- Execute copy operations -->
		<ant antfile="${scorm.dir}/${document.plain}/copymedia.build"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- +                                    ZIP files                                                                                      + -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<zip destfile="${scorm.dir}/${document.plain}.zip" basedir="${scorm.dir}" includes="${document.plain}/" excludes="**/*.xml,**/*.log,**/*.build"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- +                                    Writing result file                                                                        + -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo>Writing result file</echo>
		<echo file="${scorm.dir}/${document.plain}/result.xml">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
		&lt;productionresult logfile="${base.dir}/${document.plain}/${document.plain}.build.log"&gt;
			&lt;producedentities&gt;
				&lt;file directory="${base.dir}/" filename="${document.plain}.zip"&gt;
     					 &lt;description&gt;Ge'Zip'te SCORM-Version von ${document.plain}&lt;/description&gt;
   				&lt;/file&gt;
			&lt;/producedentities&gt;
		&lt;/productionresult&gt; 
		</echo>
		<record name="${scorm.dir}/${document.plain}/${document.plain}.build.log" action="stop"/>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- Clean math images             -->
	<target name="cleanmath" if="do_cleanmath">
		<delete dir="${scorm.dir}/math"/>
		<delete dir="${scorm.dir}/${document.plain}/math"/>
		<delete dir="${scorm.dir}/${document.plain}/**/math"/>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="producibleEntities" depends="initialisation">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<echo file="${scorm.dir}/${document.plain}/producibleEntities.xml">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
			&lt;producibleEntities logfile="${base.dir}/${document.plain}/${document.plain}.producibleEntities.log"&gt;
			&lt;file directory="${base.dir}/${document.plain}/" filename="index.html"&gt;
			&lt;description&gt;SCORM-Paket von ${document.plain}&lt;/description&gt;
			&lt;/file&gt;
			&lt;/producibleEntities&gt;
		</echo>
	</target>
	<target name="producibleEntitiesNEW" depends="initialisation">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<record name="${scorm.dir}/${document.plain}/${document.plain}.producibleEntities.log" action="start" append="no"/>
		<echo message="producibleEntities - Pass1: making demux1"/>
		<apply executable="java" dest="${scorm.dir}/${document.plain}" parallel="false" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<!--arg value="-ds"/-->
			<!--arg value="-w0"/-->
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/common/demux.xsl"/>
			<arg value="documentname=${document.plain}"/>
			<arg value="document_url=${scorm.dir}/${document.plain}/${document.plain}.tag.xml"/>
			<arg value="designpath=${src.dir}/system/design/"/>
			<fileset dir="${scorm.dir}/${document.plain}" includes="${document.plain}.tag.xml"/>
			<mapper type="glob" from="*.tag.xml" to="*.demux.xml"/>
		</apply>
		<echo message="producibleEntities - Pass2: making producibleEntities.xml"/>
		<apply executable="java" dest="${scorm.dir}/${document.plain}" parallel="false" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<!--arg value="-ds"/-->
			<!--arg value="-w0"/-->
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/common/producibleEntities.xsl"/>
			<arg value="Dokumentname=${document.plain}"/>
			<arg value="LogPfad=${scorm.dir}${document.plain}/"/>
			<fileset dir="${scorm.dir}/${document.plain}" includes="${document.plain}.demux.xml"/>
			<mapper type="glob" from="${document.plain}.demux.xml" to="producibleEntities.xml"/>
		</apply>
		<record name="${scorm.dir}/${document.plain}/${document.plain}.producableEntities.log" action="stop"/>
	</target>
	<!-- old format for backwards compatibility -->
	<target name="producableEntities" depends="initialisation">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<echo file="${scorm.dir}/${document.plain}/producableEntities.xml">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
			&lt;producableEntities logfile="${base.dir}/${document.plain}/${document.plain}.producableEntities.log"&gt;
   				&lt;file directory="${base.dir}/${document.plain}/" filename="index.html"&gt;
     					 &lt;description&gt;SCORM-Paket von ${document.plain}&lt;/description&gt;
   				&lt;/file&gt;
			&lt;/producableEntities&gt;
		</echo>
	</target>
</project>
