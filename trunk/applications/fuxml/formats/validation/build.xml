<?xml version="1.0" encoding="UTF-8"?>
<project name="validation" default="validation">
	<!-- folgende properties werden an das makefile uebergeben: -->
	<!--property name="ilona.home" value="/ilona"/-->
	<!--property name="ilona.contentstore" value="/ilona/repository"/-->
	<!--property name="ilona.output" value="/ilona/output"/-->
	<!--property name="project" value="testkurs"/-->
	<!--property name="masterfile" value="test.xml"/-->
	<!--property name="documentdir" value=""/-->
	<property name="project" value="${coursename}"/>
	<property name="document" value="${documentdir}${masterfile}"/>
	<property name="src.dir" value="${ilona.contentstore}/${project}"/>
	<property name="validation.dir" value="${ilona.output}/${project}/validation/${documentdir}"/>
	<property name="common.dir" value="${ilona.output}/${project}/common/${documentdir}"/>
	<property name="format.dir" value="${ilona.home}/applications/fuxml/formats"/>
	<property name="latexcommand" value="latex"/>
	<property name="xsltemp.dir" value="${ilona.output}/${project}/xsl"/>
	<property name="base.dir" value="${project}/${format}/${documentdir}"/>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="setup">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<echo>SETUP</echo>
		<delete dir="${validation.dir}/${document.plain}"/>
		<mkdir dir="${validation.dir}"/>
		<mkdir dir="${validation.dir}/${document.plain}"/>
		<record name="${validation.dir}/${document.plain}/${document.plain}.build.log" action="start" append="no"/>
		<tstamp>
			<format property="time" pattern="dd/MM/yyyy hh:mm aa"/>
		</tstamp>
		<echo>Time: ${time}</echo>
		<!-- copy ProductionRequest -->
		<copy file="${ilona.output}/sessionpreferences/${username}-${project}-request.xml" tofile="${validation.dir}/${document.plain}/request.xml" failonerror="true" overwrite="true"/>
		<copy todir="${xsltemp.dir}">
			<fileset dir="${format.dir}"/>
		</copy>
		<!-- copy user commands and hyphenation information -->
		<copy file="${src.dir}/system/config/config.tex" tofile="${validation.dir}/${document.plain}/_config.tex" failonerror="false" preservelastmodified="true"/>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="prestage">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<echo message="Assembly"/>
		<exec executable="java" dir="${validation.dir}/${document.plain}" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<arg value="${document.plain}.assembled.xml"/>
			<arg value="${src.dir}/${document}"/>
			<arg value="${xsltemp.dir}/common/assemble.xsl"/>
			<arg value="root-dir=${src.dir}/"/>
			<arg value="documentname=${document}"/>
			<arg value="linkwatch-file=${src.dir}/config/linkwatch.xml"/>
			<arg value="request-file=${validation.dir}/${document.plain}/request.xml"/>
		</exec>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="validation" depends="setup">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<antcall target="stage1"/>
		<antcall target="result"/>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="stage1">
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!--                            Check DTD Validity                                                          -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo file="${validation.dir}/${document.plain}/parserfailures.xml">&lt;failures/&gt;</echo>
		<echo>${document}</echo>
		<java classname="org.openfuxml.producer.utilities.Parser" fork="true" resultproperty="parser.result">
			<arg value="${src.dir}/${document}"/>
			<arg value="${validation.dir}/${document.plain}/parserfailures.xml"/>
		</java>
		<condition property="parser.error">
			<equals arg1="${parser.result}" arg2="1"/>
		</condition>
		<echo>${parser.error}</echo>
		<antcall target="stage2"/>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="stage2" unless="parser.error">
		<echo>${parser.error}</echo>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!--                            Referenced Resources                                                  -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Referenced Resources"/>
		<apply executable="java" dest="${validation.dir}/${document.plain}">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/validation/referencedresources.xsl"/>
			<arg value="srcdir=${src.dir}/${documentdir}"/>
			<arg value="request=${validation.dir}/${document.plain}/request.xml"/>
			<fileset dir="${src.dir}" includes="${document}"/>
			<mapper type="merge" to="referencedresources.xml"/>
		</apply>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!--           Check Existance of external documents and resources                 -->
		<!--           Check existance of print version for images                                   -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<dirname property="d.path" file="${src.dir}/${documentdir}/dummy"/>
		<echo message="File checking"/>
		<apply executable="java" dest="${validation.dir}/${document.plain}">
			<arg value="org.openfuxml.producer.utilities.FileChecker"/>
			<arg value="${d.path}"/>
			<srcfile/>
			<targetfile/>
			<arg value="referencedresource"/>
			<fileset dir="${validation.dir}/${document.plain}" includes="referencedresources.xml"/>
			<mapper type="merge" to="referencedresources.check.xml"/>
		</apply>
		<delete file="${validation.dir}/${document.plain}/referencedresources.xml"/>
		<move file="${validation.dir}/${document.plain}/referencedresources.check.xml" tofile="${validation.dir}/${document.plain}/referencedresources.xml"/>
		<apply executable="java" dest="${validation.dir}/${document.plain}">
			<arg value="org.openfuxml.producer.utilities.FileChecker"/>
			<arg value="${d.path}"/>
			<srcfile/>
			<targetfile/>
			<arg value="referenceddocument"/>
			<fileset dir="${validation.dir}/${document.plain}" includes="referencedresources.xml"/>
			<mapper type="merge" to="referencedresources.check.xml"/>
		</apply>
		<delete file="${validation.dir}/${document.plain}/referencedresources.xml"/>
		<move file="${validation.dir}/${document.plain}/referencedresources.check.xml" tofile="${validation.dir}/${document.plain}/referencedresources.xml"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!--                            Check DTD Validity of Referenced Resources               -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<apply executable="java" dest="${validation.dir}/${document.plain}">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/validation/validatereferenceddocuments.xsl"/>
			<arg value="srcdir=${src.dir}/${documentdir}"/>
			<arg value="request=${validation.dir}/${document.plain}/request.xml"/>
			<fileset dir="${validation.dir}/${document.plain}" includes="referencedresources.xml"/>
			<mapper type="merge" to="refdocvalidate.build"/>
		</apply>
		<ant antfile="${validation.dir}/${document.plain}/refdocvalidate.build" dir="${validation.dir}/${document.plain}" inheritAll="true"/>
		<loadfile property="refdoc.parser.error.file" srcfile="${validation.dir}/${document.plain}/refdoc.parser.error"/>
		<echo>FILE: ${refdoc.parser.error.file}</echo>
		<condition property="refdoc.parser.error">
			<istrue value="${refdoc.parser.error.file}"/>
		</condition>
		<echo>RESULT: ${refdoc.parser.error}</echo>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!--                            Assemble Parser Failures                                              -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo>Assembly of parser failures in external documents</echo>
		<apply executable="java" dest="${validation.dir}/${document.plain}">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/validation/assembleparserfailures.xsl"/>
			<arg value="workdir=${validation.dir}/${document.plain}"/>
			<arg value="document=${document}"/>
			<arg value="request=${validation.dir}/${document.plain}/request.xml"/>
			<fileset dir="${validation.dir}/${document.plain}" includes="referencedresources.xml"/>
			<mapper type="merge" to="parserfailures.all.xml"/>
		</apply>
		<delete file="${validation.dir}/${document.plain}/parserfailures.xml"/>
		<move file="${validation.dir}/${document.plain}/parserfailures.all.xml" tofile="${validation.dir}/${document.plain}/parserfailures.xml"/>
		<antcall target="stage3"/>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!--    If no parser errors occured validation continues                                                -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="stage3" unless="refdoc.parser.error">
		<echo>RESULT: ${refdoc.parser.error}</echo>
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!--                            Check XREF                                                                                    -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Check XREF"/>
		<apply executable="java" dest="${validation.dir}/${document.plain}">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/validation/checkxref.xsl"/>
			<arg value="srcdir=${src.dir}/${documentdir}"/>
			<arg value="document=${document.plain}"/>
			<arg value="request=${validation.dir}/${document.plain}/request.xml"/>
			<fileset dir="${src.dir}" includes="${document}"/>
			<mapper type="merge" to="xreffailures.xml"/>
		</apply>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!--                            Check ID                                                                          -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Check IDs"/>
		<!-- The document has to be assembled in order to detect collisions between IDs from different documents -->
		<antcall target="prestage"/>
		<apply executable="java" dest="${validation.dir}/${document.plain}">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/validation/checkid.xsl"/>
			<arg value="srcdir=${src.dir}/${documentdir}"/>
			<fileset dir="${validation.dir}/${document.plain}" includes="${document.plain}.assembled.xml"/>
			<mapper type="merge" to="idfailures.xml"/>
		</apply>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!--                         Check LaTeX Syntax                                                         -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Extract Math"/>
		<apply executable="java" dest="${validation.dir}/${document.plain}" parallel="false">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/validation/extracteq.xsl"/>
			<arg value="srcdir=${src.dir}/${documentdir}"/>
			<arg value="request=${validation.dir}/${document.plain}/request.xml"/>
			<fileset dir="${src.dir}/${documentdir}" includes="${document.plain}.xml"/>
			<mapper type="glob" from="*.xml" to="*.tex"/>
		</apply>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="copy stylefiles"/>
		<copy todir="${validation.dir}/${document.plain}">
			<fileset dir="${xsltemp.dir}/latexpdf/latex" includes="*"/>
		</copy>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="latex"/>
		<apply executable="${latexcommand}" dir="${validation.dir}/${document.plain}" dest="${validation.dir}/${document.plain}" parallel="false">
			<arg value="-interaction=nonstopmode"/>
			<srcfile/>
			<fileset dir="${validation.dir}/${document.plain}" includes="*.tex" excludes="_config.tex"/>
			<mapper type="glob" from="*.tex" to="*.pdf"/>
		</apply>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Create Log"/>
		<exec executable="java" dir="${validation.dir}/${document.plain}">
			<arg value="org.openfuxml.producer.utilities.LatexLog"/>
			<arg value="${validation.dir}/${document.plain}/${document.plain}.log"/>
			<arg value="${validation.dir}/${document.plain}/${document.plain}.tex"/>
			<arg value="${validation.dir}/${document.plain}/latexfailures.xml"/>
		</exec>
		<!--antcall target="result"/-->
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="result">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!--                            Create Report File                                                            -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Create Report"/>
		<apply executable="java" dest="${validation.dir}/${document.plain}">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/validation/report.xsl"/>
			<arg value="workdir=${validation.dir}/${document.plain}/"/>
			<arg value="document=${document}"/>
			<arg value="srcfile=${src.dir}/${document}"/>
			<arg value="request=${validation.dir}/${document.plain}/request.xml"/>
			<fileset dir="${validation.dir}/${document.plain}/" includes="parserfailures.xml"/>
			<mapper type="merge" to="report.xml"/>
		</apply>
		<echo message="Create HTML Page"/>
		<apply executable="java" dest="${validation.dir}/${document.plain}">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/validation/reporthtml.xsl"/>
			<fileset dir="${validation.dir}/${document.plain}/" includes="report.xml"/>
			<mapper type="merge" to="report.html"/>
		</apply>
		<copy file="${xsltemp.dir}/validation/html.css" todir="${validation.dir}/${document.plain}"/>
		<copy file="${xsltemp.dir}/validation/report.css" todir="${validation.dir}/${document.plain}"/>
		<copy file="${validation.dir}/${document.plain}/report.html" tofile="${validation.dir}/${document.plain}/report_all.html"/>
		<!-- Kludge -->
		<copy file="${validation.dir}/${document.plain}/report.xml" tofile="${validation.dir}/${document.plain}/report_all.xml"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- +                                    Writing result file                                                                        + -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo>Writing result file</echo>
		<echo file="${validation.dir}/${document.plain}/result.xml">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
		&lt;productionresult logfile="${base.dir}/${document.plain}/${document.plain}.build.log"&gt;
			&lt;producedentities&gt;
   				&lt;file id="html" directory="${base.dir}/${document.plain}/" filename="report.html"&gt;
     					 &lt;description&gt;Validierungsbericht (html): ${document.plain}&lt;/description&gt;
   				&lt;/file&gt;
				&lt;file id="xml" directory="${base.dir}/${document.plain}/" filename="report.xml"&gt;
     					 &lt;description&gt;Validierungsbericht (xml): ${document.plain}&lt;/description&gt;
   				&lt;/file&gt;
			&lt;/producedentities&gt;
		&lt;/productionresult&gt; 
		</echo>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="producibleEntities" depends="setup">
		<basename property="masterfile.plain" file="${masterfile}" suffix=".xml"/>
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<record name="${validation.dir}/${document.plain}/${document.plain}.producibleEntities.log" action="start" append="no"/>
		<echo file="${validation.dir}/${document.plain}/producibleEntities.xml">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
			&lt;producibleentities logfile="${base.dir}/${document.plain}/${document.plain}.producibleEntities.log"&gt;
   				&lt;file directory="${base.dir}/${document.plain}/" filename="report.html"&gt;
     					 &lt;description&gt;Validierungsbericht fuer ${document}&lt;/description&gt;
   				&lt;/file&gt;
				&lt;file directory="${base.dir}/${document.plain}/" filename="report_all.html"&gt;
     					 &lt;description&gt;Validierungsbericht fuer ${document} inkl. aller externen Dokumente&lt;/description&gt;
   				&lt;/file&gt;
			&lt;/producibleentities&gt;
		</echo>
		<record name="${validation.dir}${document.plain}/${document.plain}.producibleEntities.log" action="stop"/>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- Old format for backwards compatibility -->
	<target name="producableEntities" depends="setup">
		<basename property="masterfile.plain" file="${masterfile}" suffix=".xml"/>
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<record name="${validation.dir}/${document.plain}/${document.plain}.producableEntities.log" action="start" append="no"/>
		<echo file="${validation.dir}/${document.plain}/producableEntities.xml">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
			&lt;producibleEntities logfile="${base.dir}/${document.plain}/${document.plain}.producableEntities.log"&gt;
   				&lt;file directory="${base.dir}/${document.plain}/" filename="report.html"&gt;
     					 &lt;description&gt;Validierungsbericht fuer ${document}&lt;/description&gt;
   				&lt;/file&gt;
				&lt;file directory="${base.dir}/${document.plain}/" filename="report_all.html"&gt;
     					 &lt;description&gt;Validierungsbericht fuer ${document} inkl. aller externen Dokumente&lt;/description&gt;
   				&lt;/file&gt;
			&lt;/producibleEntities&gt;
		</echo>
		<record name="${validation.dir}${document.plain}/${document.plain}.producableEntities.log" action="stop"/>
	</target>
</project>
