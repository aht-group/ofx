<?xml version="1.0" encoding="UTF-8"?>
	<!-- ********************************************************************
		$Id: build.xml,v 1.6 2007/07/27 09:49:33 hemmer Exp $
		********************************************************************
*******************************************************************************
		| openFuXML open source                                                       |
*******************************************************************************
		| Copyright (c) 2002-2006 openFuXML open source, University of Hagen          |
		|                                                                             |
		| This program is free software; you can redistribute it and/or               |
		| modify it under the terms of the GNU General Public License                 |
		| as published by the Free Software Foundation; either version 2              |
		| of the License, or (at your option) any later version.                      |
		|                                                                             |
		| This program is distributed in the hope that it will be useful,             |
		| but WITHOUT ANY WARRANTY; without even the implied warranty of              |
		| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               |
		| GNU General Public License for more details.                                |
		|                                                                             |
		| You should have received a copy of the GNU General Public License           |
		| along with this program; if not, write to the Free Software                 |
		| Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. |
*******************************************************************************
		******************************************************************** -->
<project name="latexpdf" default="latexpdf">
	<!-- folgende properties werden an das makefile uebergeben: -->
	<!--property name="ilona.home" value="/ilona"/-->
	<!--property name="ilona.contentstore" value="/ilona/repository"/-->
	<!--property name="ilona.output" value="/ilona/output"/-->
	<!--property name="documentdir" value=""/-->
	<!-- DIE VARIABLE DOCUMENTDIR WURDE AUS KOMPATIBILITÄTSGRÜNDEN AUS DEN FOLGENDEN ZUSAMMENGESETZTEN VARIABLEN ENTFERNT -->
	<!--property name="format" value="latexpdf"/-->
	<property name="project" value="${coursename}"/>
	<property name="document" value="${masterfile}"/>
	<property name="src.dir" value="${ilona.contentstore}/${project}"/>
	<property name="latexpdf.dir" value="${ilona.output}/${project}/latexpdf/"/>
	<property name="common.dir" value="${ilona.output}/${project}/common/"/>
	<property name="format.dir" value="${ilona.home}/applications/fuxml/formats"/>
	<property name="dtd.dir" value="${src.dir}/dtd"/>
	<property name="image.dir" value="${ilona.output}/${project}/latexpdf/eps"/>
	<property name="latexcommand" value="latex"/>
	<property name="xsltemp.dir" value="${ilona.output}/${project}/xsl"/>
	<property name="config.dir" value="${src.dir}/system/config"/>
	<property name="project.dir" value="${ilona.output}/${project}"/>
	<property name="base.dir" value="${project}/${format}"/>
	<echo>Sie benutzen openFuXML unter ${os.name}</echo>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="initialisation">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<!-- Copy XSL files to temporary directory -->
		<copy todir="${xsltemp.dir}" preservelastmodified="true" overwrite="true">
			<fileset dir="${format.dir}"/>
		</copy>
		<!-- process request options into properties -->
		<exec executable="java" dir="${ilona.output}/sessionpreferences" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<arg line="-o"/>
			<arg value="${ilona.output}/sessionpreferences/${username}-${project}-request.options"/>
			<arg value="${ilona.output}/sessionpreferences/${username}-${project}-request.xml"/>
			<arg value="${xsltemp.dir}/common/processoptions.xsl"/>
		</exec>
		<property file="${ilona.output}/sessionpreferences/${username}-${project}-request.options"/>
		<!-- determine if "clean" option is "true"-->
		<condition property="do_clean">
			<istrue value="${option.clean}"/>
		</condition>
		<echo>Clean output dir: ${do_clean}</echo>
		<antcall target="clean"/>
		<mkdir dir="${latexpdf.dir}"/>
		<mkdir dir="${common.dir}/${document.plain}"/>
		<mkdir dir="${latexpdf.dir}/eps"/>
		<mkdir dir="${latexpdf.dir}/${document.plain}"/>
		<!-- Start Logging -->
		<record name="${latexpdf.dir}/${document.plain}/${document.plain}.build.log" action="start" append="no"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<tstamp>
			<format property="time" pattern="dd/MM/yyyy hh:mm aa"/>
		</tstamp>
		<echo>Time: ${time}</echo>
		<echo message="Ant Home = ${ant.home}"/>
		<echo message="Ant Version = ${ant.version}"/>
		<echo message="Java Version = ${java.version}"/>
		<property environment="env"/>
		<echo message="Host Name = ${env.HOSTNAME}"/>
		<!-- copy ProductionRequest -->
		<copy file="${ilona.output}/sessionpreferences/${username}-${project}-request.xml" tofile="${latexpdf.dir}/${document.plain}/request.xml" failonerror="true" overwrite="true"/>
		<!-- copy user settings for project -->
		<copy file="${src.dir}/system/config/config.xml" tofile="${xsltemp.dir}/common/config.xml" failonerror="false" overwrite="true" preservelastmodified="true"/>
		<!-- copy user settings for document -->
		<copy file="${src.dir}/system/config/${document.plain}/config.xml" tofile="${xsltemp.dir}/common/config.xml" failonerror="false" overwrite="true" preservelastmodified="true"/>
		<!-- copy user commands and hyphenation information -->
		<copy file="${src.dir}/system/config/config.tex" tofile="${latexpdf.dir}/${document.plain}/_config.tex" failonerror="false" preservelastmodified="true"/>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="clean" if="do_clean"> <!-- allways clean due to otherwise stalling of build process -->
		<echo>Deleting old files</echo>
		<delete dir="${latexpdf.dir}/${document.plain}"/>
		<delete dir="${common.dir}/${document.plain}"/>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="checkrebuild">
		<!-- If config.xml or any of the prestage xsl-files has changed -> rebuild -->
		<dependset>
			<srcfileset dir="${xsltemp.dir}/common" includes="*" excludes="build.xml"/>
			<targetfileset dir="${common.dir}/${document.plain}" includes="*"/>
		</dependset>
		<!-- If user config files changed -> rebuild all tex files -->
		<!--dependset>
			<srcfileset dir="${src.dir}/system/config" includes="config.tex"/>
			<targetfileset dir="${latexpdf.dir}/${document.plain}" includes="*.pdf"/>
		</dependset-->
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="latexpdf" depends="initialisation">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<!-- Copy user xsl files -->
		<echo>Copy User XSL</echo>
		<copy todir="${xsltemp.dir}/latexpdf" failonerror="false" preservelastmodified="true" overwrite="true">
			<fileset dir="${config.dir}/latexpdf"/>
		</copy>
		<!-- Determine if rebuild is necessary -->
		<antcall target="checkrebuild"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!--                           Run prestage                                                                   -->
		<ant antfile="${xsltemp.dir}/common/build.xml" dir="." target="prestage" inheritAll="true"/>
		<!--                                                                                                                    -->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- if latex xsl-files have changed -> rebuild -->
		<dependset>
			<srcfileset dir="${xsltemp.dir}/latexpdf" includes="*"/>
			<targetfilelist dir="${latexpdf.dir}/${document.plain}" files="${document.plain}.tex.xml"/>
		</dependset>
		<echo message="Mapping of Unicode Characters to Latex commands"/>
		<apply executable="java" dest="${latexpdf.dir}/${document.plain}" parallel="false" failonerror="true">
			<arg value="org.openfuxml.producer.preprocessors.MappingPreprocessor"/>
			<srcfile/>
			<targetfile/>
			<arg value="${xsltemp.dir}/latexpdf/conversionlist.xml"/>
			<arg value="${xsltemp.dir}/latexpdf/idtransform.xsl"/>
			<fileset dir="${common.dir}/${document.plain}" includes="${document.plain}.assembled.lin.cu.num.xml"/>
			<!--fileset dir="${latexpdf.dir}/${document.plain}" includes="${document.plain}.lf.xml"/-->
			<mapper type="glob" from="*.assembled.lin.cu.num.xml" to="*.tex.xml"/>
			<!--mapper type="glob" from="*.lf.xml" to="*.tex.xml"/-->
		</apply>
		<!-- Character mapping for configuration document -->
		<!-- 1. conversion of ${...} commands -->
		<exec executable="java" dir="${xsltemp.dir}/common" failonerror="true">
			<arg value="org.openfuxml.producer.preprocessors.MappingPreprocessor"/>
			<arg value="${xsltemp.dir}/common/config.xml"/>
			<arg value="${latexpdf.dir}/${document.plain}/config.tex.xml"/>
			<arg value="${xsltemp.dir}/latexpdf/conversionlist.xml"/>
			<arg value="${xsltemp.dir}/latexpdf/idtransform.xsl"/>
		</exec>
		<!-- Character mapping for bibtex documents -->
		<apply executable="java" dest="${latexpdf.dir}/${document.plain}" parallel="false" failonerror="false">
			<arg value="org.openfuxml.producer.preprocessors.MappingPreprocessor"/>
			<srcfile/>
			<targetfile/>
			<arg value="${xsltemp.dir}/latexpdf/conversionlist.xml"/>
			<arg value="${xsltemp.dir}/latexpdf/idtransform.xsl"/>
			<fileset dir="${src.dir}">
				<include name="bibliography/**/*.bib.xml"/>
			</fileset>
			<mapper type="flatten" from="*.bib.xml" to="*.bib.tex.xml"/>
		</apply>
		<!-- BIbXML -> BibTeX-->
		<apply executable="java" dest="${latexpdf.dir}/${document.plain}">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/latexpdf/bibtexml.xsl"/>
			<fileset dir="${latexpdf.dir}/${document.plain}" includes="*.bib.xml"/>
			<mapper type="glob" from="*.bib.xml" to="*.bib"/>
		</apply>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="XML to Latex"/>
		<exec executable="java" dir="${latexpdf.dir}/${document.plain}" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<arg value="${document.plain}.tex"/>
			<arg value="${document.plain}.tex.xml"/>
			<arg value="${xsltemp.dir}/latexpdf/latex.xsl"/>
			<arg value="documentname=${document.plain}"/>
			<arg value="workdir=${latexpdf.dir}/${document.plain}"/>
		</exec>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- Creation of result document -->
		<antcall target="result" inheritAll="true"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- Copy or autocreate eps images-->
		<echo message="copy eps-graphics"/>
		<copy includeEmptyDirs="false" flatten="true" todir="${image.dir}" preservelastmodified="true">
			<fileset dir="${src.dir}" includes="bilder/**/*.eps, grafiken/**/*.eps"/>
		</copy>
		<!-- ++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- Create copy build file -->
		<!--apply executable="java" dest="${latexpdf.dir}/${document.plain}">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/latexpdf/copymedia.xsl"/>
			<arg value="srcdir=${src.dir}"/>
			<arg value="workdir=${latexpdf.dir}/${document.plain}"/>
			<arg value="imagepath=${image.dir}"/>
			<fileset dir="${common.dir}/${document.plain}/" includes="${document.plain}.assembled.lin.cu.xml"/>
			<mapper type="merge" to="copymedia.build"/>
		</apply-->
		<!-- Execute copy operations -->
		<!--ant antfile="${latexpdf.dir}/${document.plain}/copymedia.build"/-->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- if graphics have changed TEX has to be rerun -->
		<dependset>
			<srcfileset dir="${image.dir}" includes="*.eps"/>
			<srcfilelist dir="${latexpdf.dir}/${document.plain}" files="_config.tex"/>
			<targetfileset dir="${latexpdf.dir}/${document.plain}" includes="*.tex.MD5"/>
		</dependset>
		<!-- ++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="copy stylefiles"/>
		<copy todir="${latexpdf.dir}/${document.plain}">
			<fileset dir="${xsltemp.dir}/latexpdf/latex" includes="*"/>
		</copy>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!--antcall target="epsautocreate"/-->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- Create empty files for toc, index, and page numbering to avoid latex failures -->
		<echo message="Create dummy files"/>
		<exec executable="java" dir="${latexpdf.dir}/${document.plain}" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<arg value="builddummyfiles.xml"/>
			<arg value="${document.plain}.result.xml"/>
			<arg value="${xsltemp.dir}/latexpdf/dummyfiles.xsl"/>
			<!--arg value="workdir=file://${latexpdf.dir}/${document.plain}"/-->
		</exec>
		<ant antfile="builddummyfiles.xml" dir="${latexpdf.dir}/${document.plain}"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Generation of Latex Build Files"/>
		<exec executable="java" dir="${latexpdf.dir}/${document.plain}" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<arg value="${document.plain}.all.build"/>
			<arg value="${document.plain}.result.xml"/>
			<arg value="${xsltemp.dir}/latexpdf/generatebuildfile.xsl"/>
			<!--arg value="${xsltemp.dir}/latexpdf/generatelatexrun.xsl"/-->
			<arg value="document=${document.plain}"/>
			<arg value="workdir=${latexpdf.dir}${document.plain}"/>
		</exec>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Production of output documents"/>
		<ant antfile="${latexpdf.dir}/${document.plain}/${document.plain}.all.build" dir="${latexpdf.dir}/${document.plain}" target="latexpdfproduction" inheritAll="true"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Creation of HTML Result Page"/>
		<!-- XML result document -> HTML -->
		<!-- timeout:  In some seldom cases, the process does not finish! Why?? -->
		<exec executable="java" dir="${latexpdf.dir}/${document.plain}" failonerror="true" timeout="20000">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<arg value="${document.plain}.html"/>
			<arg value="${document.plain}.result.xml"/>
			<arg value="${xsltemp.dir}/latexpdf/resulthtml.xsl"/>
			<arg value="documentname=${document.plain}"/>
			<arg value="logfile=${document.plain}.build.log"/>
		</exec>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Creation of producedentities"/>
		<exec executable="java" dir="${latexpdf.dir}/${document.plain}" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<arg value="result.xml"/>
			<arg value="${document.plain}.result.xml"/>
			<arg value="${xsltemp.dir}/latexpdf/producedEntities.xsl"/>
			<arg value="logfile=${document.plain}.build.log"/>
			<arg value="basedir=${base.dir}/${document.plain}"/>
			<arg value="workdir=${latexpdf.dir}/${document.plain}"/>
		</exec>
		<!-- Alternativ kann eine HTML-Seite mit Links auf die produzierten Dokumente erzeugt werden -->
		<!--echo file="${latexpdf.dir}/${document.plain}/result.xml">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
		&lt;productionresult logfile="${base.dir}/${document.plain}/${document.plain}.build.log"&gt;
			&lt;producedentities&gt;
   				&lt;file directory="${base.dir}/${document.plain}/" filename="${document.plain}.html"&gt;
     					 &lt;description&gt;Liste der produzierten Dokumente&lt;/description&gt;
   				&lt;/file&gt;
			&lt;/producedentities&gt;
		&lt;/productionresult&gt; 
		</echo-->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<record name="${latexpdf.dir}/${document.plain}/${document.plain}.build.log" action="stop"/>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="result">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<echo message="Creation of the  result XML document"/>
		<!-- delete old result file (clutch to avoid process hangup on some systems ????) -->
		<delete file="${latexpdf.dir}/${document.plain}/${document.plain}.result.xml"/>
		<apply executable="java" dest="${latexpdf.dir}/${document.plain}" timeout="20000">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/latexpdf/resultxml.xsl"/>
			<arg value="documentname=${document.plain}"/>
			<arg value="workdir=${latexpdf.dir}/${document.plain}"/>
			<!--fileset dir="${common.dir}/${document.plain}/" includes="${document.plain}.assembled.lin.cu.xml"/-->
			<fileset dir="${common.dir}/${document.plain}/" includes="${document.plain}.assembled.lin.xml"/>
			<!--mapper type="glob" from="*.assembled.lin.cu.xml" to="*.result.xml"/-->
			<mapper type="glob" from="*.assembled.lin.xml" to="*.result.xml"/>
		</apply>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="producibleEntities" depends="initialisation">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<record name="${latexpdf.dir}/${document.plain}/${document.plain}.producibleEntities.log" action="start" append="no"/>
		<!-- Determine if rebuild is necessary -->
		<antcall target="checkrebuild"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<ant antfile="${xsltemp.dir}/common/build.xml" dir="." target="prestage1" inheritAll="true"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<antcall target="result"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Creation of the producibleEntities document"/>
		<apply executable="java" dest="${latexpdf.dir}/${document.plain}">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/latexpdf/producibleEntities.xsl"/>
			<arg value="logfile=${document.plain}.producibleEntities.log"/>
			<arg value="basedir=${base.dir}/${document.plain}"/>
			<arg value="document=${document.plain}"/>
			<fileset dir="${latexpdf.dir}/${document.plain}" includes="${document.plain}.result.xml"/>
			<mapper type="glob" from="${document.plain}.result.xml" to="producibleEntities.xml"/>
		</apply>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<record name="${latexpdf.dir}/${document.plain}/${document.plain}.producibleEntities.log" action="stop"/>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- Old format for backwards compatibility -->
	<target name="producableEntities" depends="initialisation">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<record name="${latexpdf.dir}/${document.plain}/${document.plain}.producibleEntities.log" action="start" append="no"/>
		<!-- Determine if rebuild is necessary -->
		<antcall target="checkrebuild"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<ant antfile="${xsltemp.dir}/common/build.xml" dir="." target="prestage1" inheritAll="true"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<antcall target="result"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Creation of the producibleEntities document"/>
		<apply executable="java" dest="${latexpdf.dir}/${document.plain}">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/latexpdf/producableEntities.xsl"/>
			<arg value="logfile=${document.plain}.producibleEntities.log"/>
			<arg value="basedir=${base.dir}/${document.plain}"/>
			<arg value="document=${document.plain}"/>
			<fileset dir="${latexpdf.dir}/${document.plain}" includes="${document.plain}.result.xml"/>
			<mapper type="glob" from="${document.plain}.result.xml" to="producableEntities.xml"/>
		</apply>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<record name="${latexpdf.dir}/${document.plain}/${document.plain}.producibleEntities.log" action="stop"/>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="epsautocreate">
		<echo message="Automatic creation of missing EPS graphics"/>
		<copy includeEmptyDirs="false" flatten="true" todir="${image.dir}">
			<fileset dir="${src.dir}" includes="**/*.gif,**/*.jpg,**/*.bmp,**/*.png"/>
		</copy>
		<touch>
			<fileset dir="${image.dir}" includes="*.eps"/>
		</touch>
		<apply executable="convert" dest="${image.dir}" parallel="false">
			<arg value="-scale"/>
			<arg value="70%"/>
			<arg value="-quality"/>
			<arg value="100"/>
			<srcfile/>
			<targetfile/>
			<fileset dir="${image.dir}" includes="*.gif"/>
			<mapper type="glob" from="*.gif" to="*.eps"/>
		</apply>
		<apply executable="convert" dest="${image.dir}" parallel="false">
			<arg value="-scale"/>
			<arg value="70%"/>
			<arg value="-quality"/>
			<arg value="100"/>
			<srcfile/>
			<targetfile/>
			<fileset dir="${image.dir}" includes="*.jpg"/>
			<mapper type="glob" from="*.jpg" to="*.eps"/>
		</apply>
		<apply executable="convert" dest="${image.dir}" parallel="false">
			<arg value="-scale"/>
			<arg value="70%"/>
			<arg value="-quality"/>
			<arg value="100"/>
			<srcfile/>
			<targetfile/>
			<fileset dir="${image.dir}" includes="*.png"/>
			<mapper type="glob" from="*.png" to="*.eps"/>
		</apply>
		<apply executable="convert" dest="${image.dir}" parallel="false">
			<!--arg value="-scale"/>
			<arg value="70%"/-->
			<arg value="-quality"/>
			<arg value="100"/>
			<srcfile/>
			<targetfile/>
			<fileset dir="${image.dir}" includes="*.bmp"/>
			<mapper type="glob" from="*.bmp" to="*.eps"/>
		</apply>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
</project>
