<?xml version="1.0" encoding="UTF-8"?>
<!--
		*******************************************************************************
		| openFuXML open source                                                       |
		*******************************************************************************
		| Copyright (c) 2002-2006 openFuXML open source, University of Hagen          |
		|                                                                             |
		| This program is free software; you can redistribute it and/or               |
		| modify it under the terms of the GNU General Public License                 |
		| as published by the Free Software Foundation; either version 2              |
		| of the License, or (at your option) any later version.                      |
		|                                                                             |
		| This program is distributed in the hope that it will be useful,             |
		| but WITHOUT ANY WARRANTY; without even the implied warranty of              |
		| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               |
		| GNU General Public License for more details.                                |
		|                                                                             |
		| You should have received a copy of the GNU General Public License           |
		| along with this program; if not, write to the Free Software                 |
		| Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. |
		*******************************************************************************
-->
<project default="prestage">
	<property name="document" value="${masterfile}"/>
	<target name="initialisation">
		<basename property="document.plain" file="${document}" suffix=".xml"/>
		<mkdir dir="${common.dir}"/>
		<mkdir dir="${common.dir}/${document.plain}"/>
		<!-- copy ProductionRequest -->
		<copy file="${ilona.output}/sessionpreferences/${username}-${project}-request.xml" tofile="${common.dir}/${document.plain}/request.xml" overwrite="true" failonerror="true"/>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	</target>
	<target name="prestage">
		<antcall target="prestage1"/>
		<antcall target="prestage2"/>
	</target>
	<target name="prestage1" depends="initialisation">
		<antcall target="assembly"/>
		<antcall target="linearisation"/>
	</target>
	<target name="assembly">
		<echo message="Assembly"/>
		<exec executable="java" dir="${common.dir}/${document.plain}" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<arg value="${document.plain}.assembled.xml"/>
			<arg value="${src.dir}/${document}"/>
			<arg value="${xsltemp.dir}/common/assemble.xsl"/>
			<arg value="root-dir=${src.dir}/"/>
			<arg value="documentname=${document}"/>
			<arg value="linkwatch-file=${src.dir}/config/linkwatch.xml"/>
			<arg value="request-file=${common.dir}/${document.plain}/request.xml"/>
		</exec>
	</target>
	<target name="linearisation" depends="testMD5_assembled" unless="isMD5ok_assembled">
		<echo message="Linearisation"/>
		<apply executable="java" dest="${common.dir}/${document.plain}" parallel="false" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/common/linearisation.xsl"/>
			<arg value="document=${document}"/>
			<fileset dir="${common.dir}/${document.plain}" includes="${document.plain}.assembled.xml"/>
			<mapper type="glob" from="*.xml" to="*.lin.xml"/>
		</apply>
		<checksum file="${common.dir}/${document.plain}/${document.plain}.assembled.xml"/>
	</target>
	<target name="prestage2" depends="testMD5_linearisation" unless="isMD5ok_linearisation">
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Restructuring Course Units"/>
		<apply executable="java" dest="${common.dir}/${document.plain}" parallel="false" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/common/courseunits.xsl"/>
			<arg value="documentname=${document}"/>
			<fileset dir="${common.dir}/${document.plain}" includes="${document.plain}.assembled.lin.xml"/>
			<mapper type="glob" from="*.xml" to="*.cu.xml"/>
		</apply>
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<echo message="Numbering"/>
		<apply executable="java" dest="${common.dir}/${document.plain}" parallel="false" failonerror="true">
			<arg value="net.sf.saxon.Transform"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<arg value="${xsltemp.dir}/common/numbering.xsl"/>
			<arg value="documentname=${document}"/>
			<fileset dir="${common.dir}/${document.plain}" includes="${document.plain}.assembled.lin.cu.xml"/>
			<mapper type="glob" from="*.xml" to="*.num.xml"/>
		</apply>
		<checksum file="${common.dir}/${document.plain}/${document.plain}.assembled.lin.xml"/>
	</target>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<target name="testMD5_assembled">
		<!-- Check if contents of assembled file have changed -->
		<condition property="isMD5ok_assembled">
			<and>
				<checksum file="${common.dir}/${document.plain}/${document.plain}.assembled.xml"/>
				<available file="${common.dir}/${document.plain}/${document.plain}.assembled.lin.xml"/>
			</and>
		</condition>
	</target>
	<target name="testMD5_linearisation">
		<!-- Check if contents of assembled file have changed -->
		<condition property="isMD5ok_linearisation">
			<and>
				<checksum file="${common.dir}/${document.plain}/${document.plain}.assembled.lin.xml"/>
				<available file="${common.dir}/${document.plain}/${document.plain}.assembled.lin.cu.num.xml"/>
			</and>
		</condition>
	</target>
</project>
